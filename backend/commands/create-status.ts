import { Command } from "commander";
import { statusSchema } from "../src/schemas/statusSchema";
import prisma from "../src/utils/prisma";

const program = new Command();

program
  .name("create:status")
  .description("Cr√©er un nouveau statut")
  .option("--name <name>", "Nom du statut")
  .action(async (options) => {
    try {
      console.log("üîÑ D√©marrage de la cr√©ation du statut...");
      console.log("üì• Options re√ßues :", options);

      const result = statusSchema.safeParse(options);
      if (!result.success) {
        console.error(
          "‚ùå Oups ! Les donn√©es fournies ne sont pas valides :",
          result.error.errors
            .map((err) => `\n  ‚Ä¢ ${err.path.join(".")}: ${err.message}`)
            .join("")
        );
        console.log("üí° Veuillez fournir un nom valide pour le statut.");
        process.exit(1);
      }

      console.log("‚úÖ Validation r√©ussie. V√©rification de l'unicit√©...");

      const existingName = await prisma.status.findFirst({
        where: {
          name: result.data.name,
        },
      });
      if (existingName) {
        console.error("‚ùå Oups ! Un statut avec ce nom existe d√©j√†.");
        process.exit(1);
      }

      console.log("‚úÖ Nom unique confirm√©. Cr√©ation du statut...");

      // Si la validation r√©ussit et qu'aucun statut existant n'est trouv√©, cr√©er le nouveau statut
      const newStatus = await prisma.status.create({
        data: {
          name: result.data.name,
        },
      });
      console.log("‚úÖ Statut cr√©√© avec succ√®s :", newStatus);
    } catch (error) {
      console.error(
        "‚ùå Une erreur est survenue lors de la cr√©ation du statut :",
        error
      );
      await prisma.$disconnect();
      process.exit(1);
    }
  });

program.parse(process.argv);
