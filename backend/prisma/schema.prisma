generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid      String   @id @default(uuid())
  username  String
  email     String   @unique
  position  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdProjects Project[]    @relation("UserProjects")
  createdTeams    Team[]       @relation("UserTeams")
  createdEpics    epic[]       @relation("UserEpics")
  assignedEpics   epic[]       @relation("UserAssignedEpics")
  teams           Team[]
  createdTickets  ticket[]     @relation("UserTickets")
  assignedTickets  ticket[]     @relation("UserAssignedTickets")
  comments       Comment[]    @relation("UserComments")

  @@map("users")
}

model Project {
  slug        String   @id @unique
  name        String
  description String?
  createdBy   String
  status      String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator      User          @relation("UserProjects", fields: [createdBy], references: [uuid])
  teams        Team[]
  epics        epic[]

  @@map("projects")
}

model Team {
  slug       String   @id @unique
  name       String
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  creator      User           @relation("UserTeams", fields: [createdBy], references: [uuid])
  members      User[]
  projects     Project[]

  @@map("teams")
}

model epic {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  priority    String
  createdBy   String
  assignedTo  String?
  projectSlug String
  statusId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  creator     User    @relation("UserEpics", fields: [createdBy], references: [uuid])
  assignee    User?   @relation("UserAssignedEpics", fields: [assignedTo], references: [uuid])
  project     Project @relation(fields: [projectSlug], references: [slug])
  status      Status  @relation(fields: [statusId], references: [id])
  tickets     ticket[]
  comments    Comment[]

  @@map("epics")
}

model ticket {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  priority    String
  createdBy   String
  assignedTo  String?
  epicId      Int
  statusId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  creator     User    @relation("UserTickets", fields: [createdBy], references: [uuid])
  assignee    User?   @relation("UserAssignedTickets", fields: [assignedTo], references: [uuid])
  epic        epic    @relation(fields: [epicId], references: [id])
  status      Status  @relation(fields: [statusId], references: [id])
  comments    Comment[]

  @@map("tickets")
}

model Status {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  epics       epic[]
  tickets     ticket[]

  @@map("status")
}

model Comment {
  id          Int           @id @default(autoincrement())
  content     String
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  creator     User    @relation("UserComments", fields: [createdBy], references: [uuid])
  epic        epic?   @relation(fields: [epicId], references: [id])
  ticket      ticket? @relation(fields: [ticketId], references: [id])
  
  epicId      Int?
  ticketId    Int?

  @@map("comments")
}