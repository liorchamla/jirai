generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid      String   @id @default(uuid())
  username  String
  email     String   @unique
  position  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects     Project[]    @relation("UserProjects")
  createdTeams Team[]       @relation("UserTeams")
  teamMembers  TeamMember[]

  @@map("users")
}

model Project {
  slug        String   @id @unique
  name        String
  description String?
  createdBy   String
  status      String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator      User          @relation("UserProjects", fields: [createdBy], references: [uuid])
  teamProjects TeamProject[]

  @@map("projects")
}

model Team {
  slug       String   @id @unique
  name       String
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  creator      User           @relation("UserTeams", fields: [createdBy], references: [uuid])
  teamMembers  TeamMember[]
  teamProjects TeamProject[]

  @@map("teams")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [slug], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamProject {
  id        Int      @id @default(autoincrement())
  teamId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team    @relation(fields: [teamId], references: [slug], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [slug], onDelete: Cascade)

  @@unique([teamId, projectId])
  @@map("team_projects")
}